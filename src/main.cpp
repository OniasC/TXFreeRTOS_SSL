/*
******************************************************************************
File:     main.cpp
Info:     Generated by Atollic TrueSTUDIO(R) 7.1.0   2017-10-29

The MIT License (MIT)
Copyright (c) 2009-2017 Atollic AB

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes */
#include "stm32f4xx.h"

extern "C"{
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
#include "semphr.h"
}

#include "radio/bsp.h"
#include "radio/commands.h"

#include "motor.h"


void vTaskLed1( void *pvParameters){
	//const char *pcTaskName = "Task 1 is running \r\n";
	//volatile uint32_t ul;

	//configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
	//a tarefa tem implementada nela um loop infinito.
	for(;;){
		int delay;
		delay = pdMS_TO_TICKS(1000);
		vTaskDelay(delay);
		//GPIOD->ODR ^= GPIO_Pin_13;
		led_laranja.Toggle();
	}
}
void vTaskNRF24TX( void *pvParameters){
	//const char *pcTaskName = "Task 1 is running \r\n";
	//volatile uint32_t ul;
	NRF24L01P *_nrf24=(NRF24L01P*)pvParameters;
	_nrf24->Init();
	_nrf24->Config();
	uint8_t channel;
	uint64_t address;
	uint8_t* data;
	uint16_t size;
	//configASSERT( ( ( uint32_t ) pvParameters ) == 1 );

	channel=92;
	address=0xE7E7E7E7E7;

	for(;;){
		int delay;
		delay = pdMS_TO_TICKS(100);
		vTaskDelay(delay);
		//GPIOD->ODR ^= GPIO_Pin_12;
		led_verde.Toggle();

		uint8_t buffer[32];
		uint8_t received_length;

		received_length = usb_device_class_cdc_vcp.GetData(buffer, 32);
		_nrf24->TxPackage_ESB(channel, address, 0, (uint8_t*) buffer, received_length);
		while(_nrf24->Busy()){
			_nrf24->InterruptCallback();
		}
		usb_device_class_cdc_vcp.SendData(buffer , received_length);
	}
}

void vTaskNRF24RX( void *pvParameters){
	//const char *pcTaskName = "Task 1 is running \r\n";
	//volatile uint32_t ul;
	NRF24L01P *_nrf24=(NRF24L01P*)pvParameters;
	_nrf24->Init();
	_nrf24->Config();
	uint8_t channel;
	uint64_t address;
	uint8_t* data;
	uint16_t size;
	//configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
	channel=92;
	address=0xE7E7E7E7E7;
	_nrf24->StartRX_ESB(channel, address, 32, 1);

	for(;;){
		int delay;
		delay = pdMS_TO_TICKS(100);
		vTaskDelay(delay);
		GPIOD->ODR ^= GPIO_Pin_12;

		_nrf24->InterruptCallback();

		if(_nrf24->RxSize()){
			_nrf24->StartRX_ESB(channel, address, 32, 1);
			uint8_t rxsize=_nrf24->RxSize();
			if(rxsize>32) rxsize=32;
			uint8_t buffer[32];
			_nrf24->RxData(buffer, rxsize);
			led_azul.Toggle();

			usb_device_class_cdc_vcp.SendData(buffer , rxsize);
		}
	}
}

void vTaskMotor( void *pvParameters){
	Motor *_motor=(Motor*)pvParameters;
	int16_t answer;
	answer=500;
	//_motor->SetDutyCycle(answer);
	for(;;){
		xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
		led_vermelho.Toggle();
		_motor->Control_Speed(0);
	}
}

void vTask2( void *pvParameters){
	for(;;){
		int delay;
		delay = pdMS_TO_TICKS(10);
		vTaskDelay(delay);
		usb_device_class_cdc_vcp.GetData(_usbserialbuffer, 1024);
		cmdline.In(_usbserialbuffer);
		cmdline.Out(_usbserialbuffer);
		if(_usbserialbuffer.Ocupied()){
			usb_device_class_cdc_vcp.SendData(_usbserialbuffer);
		}
	}
}

int main(void)
{
  //int i = 0;
  usb.Init();
 // robo.Init();

  SysTick_Config(SystemCoreClock/1000);

   xTaskCreate(	vTaskLed1, //ponteiro para a função que implementa a tarefa
		  "Task Led1", 	//nome da função. Para facilitar o debug.
		  150, 		//stack depth
		  NULL, 		//nao usa task parameter
		  2,			//prioridade 1
		  NULL);
   xTaskCreate(	vTaskNRF24TX, //ponteiro para a função que implementa a tarefa
		  "Task NRF24TX", 	//nome da função. Para facilitar o debug.
		  700, 		//stack depth
		  (void*)&nrf24, 		//usa task parameter
		  2,			//prioridade 2
		  NULL);
   //xTaskCreate(	vTaskNRF24RX, //ponteiro para a função que implementa a tarefa
   	//  "Task NRF24RX", 	//nome da função. Para facilitar o debug.
   	//  700, 		//stack depth
   	//  (void*)&nrf24, 		//nao usa task parameter
   	//  1,			//prioridade 1
   	//  NULL);
   /*xTaskCreate(	vTask2, //ponteiro para a função que implementa a tarefa
		  "Task 2", 	//nome da função. Para facilitar o debug.
		  700, 		//stack depth
		  NULL, 		//nao usa task parameter
		  1,			//prioridade 1
		  NULL);*/
    xTaskCreate(	vTaskMotor, //ponteiro para a função que implementa a tarefa
   		  "Task Motor", 	//nome da função. Para facilitar o debug.
   		  700, 				//stack depth
  		  (void*)&motor0, 			//usa task parameter
 		  1,				//prioridade 1
		  &t1 );
  vTaskStartScheduler();
  while (1)
  {
	//i++;
  }
}

extern "C" void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName ){
	( void ) pcTaskName;
	( void ) pxTask;
	for( ;; );
}

extern "C" void vApplicationIdleHook( void ){
	volatile size_t xFreeStackSpace;
	xFreeStackSpace = xPortGetFreeHeapSize();
}

extern "C" void vApplicationTickHook( void ){
}

extern "C" void vApplicationMallocFailedHook( void ){
	for( ;; );
}

